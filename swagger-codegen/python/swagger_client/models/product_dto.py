# coding: utf-8

"""
    Store API

    Store API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ProductDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'sku': 'str',
        'upc': 'str',
        'ean': 'str',
        'name': 'str',
        'description': 'str',
        'price': 'float',
        'product_size': 'str',
        'colors': 'str',
        'image': 'list[str]',
        'image_content_type': 'str',
        'image_sha1': 'str',
        'image_cdn_url': 'str',
        'thumbnail_sha1': 'str',
        'thumbnail_cdn_url': 'str',
        'product_category': 'ProductCategoryDTO'
    }

    attribute_map = {
        'id': 'id',
        'sku': 'sku',
        'upc': 'upc',
        'ean': 'ean',
        'name': 'name',
        'description': 'description',
        'price': 'price',
        'product_size': 'productSize',
        'colors': 'colors',
        'image': 'image',
        'image_content_type': 'imageContentType',
        'image_sha1': 'imageSha1',
        'image_cdn_url': 'imageCdnUrl',
        'thumbnail_sha1': 'thumbnailSha1',
        'thumbnail_cdn_url': 'thumbnailCdnUrl',
        'product_category': 'productCategory'
    }

    def __init__(self, id=None, sku=None, upc=None, ean=None, name=None, description=None, price=None, product_size=None, colors=None, image=None, image_content_type=None, image_sha1=None, image_cdn_url=None, thumbnail_sha1=None, thumbnail_cdn_url=None, product_category=None):  # noqa: E501
        """ProductDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._sku = None
        self._upc = None
        self._ean = None
        self._name = None
        self._description = None
        self._price = None
        self._product_size = None
        self._colors = None
        self._image = None
        self._image_content_type = None
        self._image_sha1 = None
        self._image_cdn_url = None
        self._thumbnail_sha1 = None
        self._thumbnail_cdn_url = None
        self._product_category = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.sku = sku
        self.upc = upc
        self.ean = ean
        self.name = name
        if description is not None:
            self.description = description
        self.price = price
        self.product_size = product_size
        if colors is not None:
            self.colors = colors
        if image is not None:
            self.image = image
        if image_content_type is not None:
            self.image_content_type = image_content_type
        if image_sha1 is not None:
            self.image_sha1 = image_sha1
        if image_cdn_url is not None:
            self.image_cdn_url = image_cdn_url
        if thumbnail_sha1 is not None:
            self.thumbnail_sha1 = thumbnail_sha1
        if thumbnail_cdn_url is not None:
            self.thumbnail_cdn_url = thumbnail_cdn_url
        if product_category is not None:
            self.product_category = product_category

    @property
    def id(self):
        """Gets the id of this ProductDTO.  # noqa: E501


        :return: The id of this ProductDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductDTO.


        :param id: The id of this ProductDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def sku(self):
        """Gets the sku of this ProductDTO.  # noqa: E501


        :return: The sku of this ProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ProductDTO.


        :param sku: The sku of this ProductDTO.  # noqa: E501
        :type: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")  # noqa: E501

        self._sku = sku

    @property
    def upc(self):
        """Gets the upc of this ProductDTO.  # noqa: E501


        :return: The upc of this ProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._upc

    @upc.setter
    def upc(self, upc):
        """Sets the upc of this ProductDTO.


        :param upc: The upc of this ProductDTO.  # noqa: E501
        :type: str
        """
        if upc is None:
            raise ValueError("Invalid value for `upc`, must not be `None`")  # noqa: E501

        self._upc = upc

    @property
    def ean(self):
        """Gets the ean of this ProductDTO.  # noqa: E501


        :return: The ean of this ProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this ProductDTO.


        :param ean: The ean of this ProductDTO.  # noqa: E501
        :type: str
        """
        if ean is None:
            raise ValueError("Invalid value for `ean`, must not be `None`")  # noqa: E501

        self._ean = ean

    @property
    def name(self):
        """Gets the name of this ProductDTO.  # noqa: E501


        :return: The name of this ProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductDTO.


        :param name: The name of this ProductDTO.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ProductDTO.  # noqa: E501


        :return: The description of this ProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductDTO.


        :param description: The description of this ProductDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def price(self):
        """Gets the price of this ProductDTO.  # noqa: E501


        :return: The price of this ProductDTO.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProductDTO.


        :param price: The price of this ProductDTO.  # noqa: E501
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def product_size(self):
        """Gets the product_size of this ProductDTO.  # noqa: E501


        :return: The product_size of this ProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._product_size

    @product_size.setter
    def product_size(self, product_size):
        """Sets the product_size of this ProductDTO.


        :param product_size: The product_size of this ProductDTO.  # noqa: E501
        :type: str
        """
        if product_size is None:
            raise ValueError("Invalid value for `product_size`, must not be `None`")  # noqa: E501
        allowed_values = ["S", "M", "L", "XL", "XXL"]  # noqa: E501
        if product_size not in allowed_values:
            raise ValueError(
                "Invalid value for `product_size` ({0}), must be one of {1}"  # noqa: E501
                .format(product_size, allowed_values)
            )

        self._product_size = product_size

    @property
    def colors(self):
        """Gets the colors of this ProductDTO.  # noqa: E501


        :return: The colors of this ProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this ProductDTO.


        :param colors: The colors of this ProductDTO.  # noqa: E501
        :type: str
        """

        self._colors = colors

    @property
    def image(self):
        """Gets the image of this ProductDTO.  # noqa: E501


        :return: The image of this ProductDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ProductDTO.


        :param image: The image of this ProductDTO.  # noqa: E501
        :type: list[str]
        """

        self._image = image

    @property
    def image_content_type(self):
        """Gets the image_content_type of this ProductDTO.  # noqa: E501


        :return: The image_content_type of this ProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._image_content_type

    @image_content_type.setter
    def image_content_type(self, image_content_type):
        """Sets the image_content_type of this ProductDTO.


        :param image_content_type: The image_content_type of this ProductDTO.  # noqa: E501
        :type: str
        """

        self._image_content_type = image_content_type

    @property
    def image_sha1(self):
        """Gets the image_sha1 of this ProductDTO.  # noqa: E501


        :return: The image_sha1 of this ProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._image_sha1

    @image_sha1.setter
    def image_sha1(self, image_sha1):
        """Sets the image_sha1 of this ProductDTO.


        :param image_sha1: The image_sha1 of this ProductDTO.  # noqa: E501
        :type: str
        """

        self._image_sha1 = image_sha1

    @property
    def image_cdn_url(self):
        """Gets the image_cdn_url of this ProductDTO.  # noqa: E501


        :return: The image_cdn_url of this ProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._image_cdn_url

    @image_cdn_url.setter
    def image_cdn_url(self, image_cdn_url):
        """Sets the image_cdn_url of this ProductDTO.


        :param image_cdn_url: The image_cdn_url of this ProductDTO.  # noqa: E501
        :type: str
        """

        self._image_cdn_url = image_cdn_url

    @property
    def thumbnail_sha1(self):
        """Gets the thumbnail_sha1 of this ProductDTO.  # noqa: E501


        :return: The thumbnail_sha1 of this ProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_sha1

    @thumbnail_sha1.setter
    def thumbnail_sha1(self, thumbnail_sha1):
        """Sets the thumbnail_sha1 of this ProductDTO.


        :param thumbnail_sha1: The thumbnail_sha1 of this ProductDTO.  # noqa: E501
        :type: str
        """

        self._thumbnail_sha1 = thumbnail_sha1

    @property
    def thumbnail_cdn_url(self):
        """Gets the thumbnail_cdn_url of this ProductDTO.  # noqa: E501


        :return: The thumbnail_cdn_url of this ProductDTO.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_cdn_url

    @thumbnail_cdn_url.setter
    def thumbnail_cdn_url(self, thumbnail_cdn_url):
        """Sets the thumbnail_cdn_url of this ProductDTO.


        :param thumbnail_cdn_url: The thumbnail_cdn_url of this ProductDTO.  # noqa: E501
        :type: str
        """

        self._thumbnail_cdn_url = thumbnail_cdn_url

    @property
    def product_category(self):
        """Gets the product_category of this ProductDTO.  # noqa: E501


        :return: The product_category of this ProductDTO.  # noqa: E501
        :rtype: ProductCategoryDTO
        """
        return self._product_category

    @product_category.setter
    def product_category(self, product_category):
        """Sets the product_category of this ProductDTO.


        :param product_category: The product_category of this ProductDTO.  # noqa: E501
        :type: ProductCategoryDTO
        """

        self._product_category = product_category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
