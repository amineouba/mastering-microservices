# coding: utf-8

"""
    Store API

    Store API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CustomerDetailsDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'gender': 'str',
        'phone': 'str',
        'address_line1': 'str',
        'address_line2': 'str',
        'city': 'str',
        'country': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'geohash': 'str',
        'olc': 'str',
        'user': 'UserDTO'
    }

    attribute_map = {
        'id': 'id',
        'gender': 'gender',
        'phone': 'phone',
        'address_line1': 'addressLine1',
        'address_line2': 'addressLine2',
        'city': 'city',
        'country': 'country',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'geohash': 'geohash',
        'olc': 'olc',
        'user': 'user'
    }

    def __init__(self, id=None, gender=None, phone=None, address_line1=None, address_line2=None, city=None, country=None, latitude=None, longitude=None, geohash=None, olc=None, user=None):  # noqa: E501
        """CustomerDetailsDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._gender = None
        self._phone = None
        self._address_line1 = None
        self._address_line2 = None
        self._city = None
        self._country = None
        self._latitude = None
        self._longitude = None
        self._geohash = None
        self._olc = None
        self._user = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.gender = gender
        self.phone = phone
        self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        self.city = city
        self.country = country
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if geohash is not None:
            self.geohash = geohash
        if olc is not None:
            self.olc = olc
        if user is not None:
            self.user = user

    @property
    def id(self):
        """Gets the id of this CustomerDetailsDTO.  # noqa: E501


        :return: The id of this CustomerDetailsDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomerDetailsDTO.


        :param id: The id of this CustomerDetailsDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def gender(self):
        """Gets the gender of this CustomerDetailsDTO.  # noqa: E501


        :return: The gender of this CustomerDetailsDTO.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this CustomerDetailsDTO.


        :param gender: The gender of this CustomerDetailsDTO.  # noqa: E501
        :type: str
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")  # noqa: E501
        allowed_values = ["MALE", "FEMALE", "OTHER"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def phone(self):
        """Gets the phone of this CustomerDetailsDTO.  # noqa: E501


        :return: The phone of this CustomerDetailsDTO.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CustomerDetailsDTO.


        :param phone: The phone of this CustomerDetailsDTO.  # noqa: E501
        :type: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    @property
    def address_line1(self):
        """Gets the address_line1 of this CustomerDetailsDTO.  # noqa: E501


        :return: The address_line1 of this CustomerDetailsDTO.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this CustomerDetailsDTO.


        :param address_line1: The address_line1 of this CustomerDetailsDTO.  # noqa: E501
        :type: str
        """
        if address_line1 is None:
            raise ValueError("Invalid value for `address_line1`, must not be `None`")  # noqa: E501

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this CustomerDetailsDTO.  # noqa: E501


        :return: The address_line2 of this CustomerDetailsDTO.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this CustomerDetailsDTO.


        :param address_line2: The address_line2 of this CustomerDetailsDTO.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def city(self):
        """Gets the city of this CustomerDetailsDTO.  # noqa: E501


        :return: The city of this CustomerDetailsDTO.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CustomerDetailsDTO.


        :param city: The city of this CustomerDetailsDTO.  # noqa: E501
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def country(self):
        """Gets the country of this CustomerDetailsDTO.  # noqa: E501


        :return: The country of this CustomerDetailsDTO.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CustomerDetailsDTO.


        :param country: The country of this CustomerDetailsDTO.  # noqa: E501
        :type: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def latitude(self):
        """Gets the latitude of this CustomerDetailsDTO.  # noqa: E501


        :return: The latitude of this CustomerDetailsDTO.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this CustomerDetailsDTO.


        :param latitude: The latitude of this CustomerDetailsDTO.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this CustomerDetailsDTO.  # noqa: E501


        :return: The longitude of this CustomerDetailsDTO.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this CustomerDetailsDTO.


        :param longitude: The longitude of this CustomerDetailsDTO.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def geohash(self):
        """Gets the geohash of this CustomerDetailsDTO.  # noqa: E501


        :return: The geohash of this CustomerDetailsDTO.  # noqa: E501
        :rtype: str
        """
        return self._geohash

    @geohash.setter
    def geohash(self, geohash):
        """Sets the geohash of this CustomerDetailsDTO.


        :param geohash: The geohash of this CustomerDetailsDTO.  # noqa: E501
        :type: str
        """

        self._geohash = geohash

    @property
    def olc(self):
        """Gets the olc of this CustomerDetailsDTO.  # noqa: E501


        :return: The olc of this CustomerDetailsDTO.  # noqa: E501
        :rtype: str
        """
        return self._olc

    @olc.setter
    def olc(self, olc):
        """Sets the olc of this CustomerDetailsDTO.


        :param olc: The olc of this CustomerDetailsDTO.  # noqa: E501
        :type: str
        """

        self._olc = olc

    @property
    def user(self):
        """Gets the user of this CustomerDetailsDTO.  # noqa: E501


        :return: The user of this CustomerDetailsDTO.  # noqa: E501
        :rtype: UserDTO
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CustomerDetailsDTO.


        :param user: The user of this CustomerDetailsDTO.  # noqa: E501
        :type: UserDTO
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerDetailsDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerDetailsDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
