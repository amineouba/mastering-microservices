# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.product_dto import ProductDTO  # noqa: F401,E501
from swagger_server.models.shopping_cart_dto import ShoppingCartDTO  # noqa: F401,E501
from swagger_server import util


class ProductOrderDTO(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, quantity: int=None, total_price: float=None, product: ProductDTO=None, cart: ShoppingCartDTO=None):  # noqa: E501
        """ProductOrderDTO - a model defined in Swagger

        :param id: The id of this ProductOrderDTO.  # noqa: E501
        :type id: int
        :param quantity: The quantity of this ProductOrderDTO.  # noqa: E501
        :type quantity: int
        :param total_price: The total_price of this ProductOrderDTO.  # noqa: E501
        :type total_price: float
        :param product: The product of this ProductOrderDTO.  # noqa: E501
        :type product: ProductDTO
        :param cart: The cart of this ProductOrderDTO.  # noqa: E501
        :type cart: ShoppingCartDTO
        """
        self.swagger_types = {
            'id': int,
            'quantity': int,
            'total_price': float,
            'product': ProductDTO,
            'cart': ShoppingCartDTO
        }

        self.attribute_map = {
            'id': 'id',
            'quantity': 'quantity',
            'total_price': 'totalPrice',
            'product': 'product',
            'cart': 'cart'
        }
        self._id = id
        self._quantity = quantity
        self._total_price = total_price
        self._product = product
        self._cart = cart

    @classmethod
    def from_dict(cls, dikt) -> 'ProductOrderDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProductOrderDTO of this ProductOrderDTO.  # noqa: E501
        :rtype: ProductOrderDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this ProductOrderDTO.


        :return: The id of this ProductOrderDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this ProductOrderDTO.


        :param id: The id of this ProductOrderDTO.
        :type id: int
        """

        self._id = id

    @property
    def quantity(self) -> int:
        """Gets the quantity of this ProductOrderDTO.


        :return: The quantity of this ProductOrderDTO.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this ProductOrderDTO.


        :param quantity: The quantity of this ProductOrderDTO.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def total_price(self) -> float:
        """Gets the total_price of this ProductOrderDTO.


        :return: The total_price of this ProductOrderDTO.
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price: float):
        """Sets the total_price of this ProductOrderDTO.


        :param total_price: The total_price of this ProductOrderDTO.
        :type total_price: float
        """
        if total_price is None:
            raise ValueError("Invalid value for `total_price`, must not be `None`")  # noqa: E501

        self._total_price = total_price

    @property
    def product(self) -> ProductDTO:
        """Gets the product of this ProductOrderDTO.


        :return: The product of this ProductOrderDTO.
        :rtype: ProductDTO
        """
        return self._product

    @product.setter
    def product(self, product: ProductDTO):
        """Sets the product of this ProductOrderDTO.


        :param product: The product of this ProductOrderDTO.
        :type product: ProductDTO
        """

        self._product = product

    @property
    def cart(self) -> ShoppingCartDTO:
        """Gets the cart of this ProductOrderDTO.


        :return: The cart of this ProductOrderDTO.
        :rtype: ShoppingCartDTO
        """
        return self._cart

    @cart.setter
    def cart(self, cart: ShoppingCartDTO):
        """Sets the cart of this ProductOrderDTO.


        :param cart: The cart of this ProductOrderDTO.
        :type cart: ShoppingCartDTO
        """

        self._cart = cart
