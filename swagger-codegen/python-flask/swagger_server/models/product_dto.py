# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.product_category_dto import ProductCategoryDTO  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class ProductDTO(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, sku: str=None, upc: str=None, ean: str=None, name: str=None, description: str=None, price: float=None, product_size: str=None, colors: str=None, image: List[bytearray]=None, image_content_type: str=None, image_sha1: str=None, image_cdn_url: str=None, thumbnail_sha1: str=None, thumbnail_cdn_url: str=None, product_category: ProductCategoryDTO=None):  # noqa: E501
        """ProductDTO - a model defined in Swagger

        :param id: The id of this ProductDTO.  # noqa: E501
        :type id: int
        :param sku: The sku of this ProductDTO.  # noqa: E501
        :type sku: str
        :param upc: The upc of this ProductDTO.  # noqa: E501
        :type upc: str
        :param ean: The ean of this ProductDTO.  # noqa: E501
        :type ean: str
        :param name: The name of this ProductDTO.  # noqa: E501
        :type name: str
        :param description: The description of this ProductDTO.  # noqa: E501
        :type description: str
        :param price: The price of this ProductDTO.  # noqa: E501
        :type price: float
        :param product_size: The product_size of this ProductDTO.  # noqa: E501
        :type product_size: str
        :param colors: The colors of this ProductDTO.  # noqa: E501
        :type colors: str
        :param image: The image of this ProductDTO.  # noqa: E501
        :type image: List[bytearray]
        :param image_content_type: The image_content_type of this ProductDTO.  # noqa: E501
        :type image_content_type: str
        :param image_sha1: The image_sha1 of this ProductDTO.  # noqa: E501
        :type image_sha1: str
        :param image_cdn_url: The image_cdn_url of this ProductDTO.  # noqa: E501
        :type image_cdn_url: str
        :param thumbnail_sha1: The thumbnail_sha1 of this ProductDTO.  # noqa: E501
        :type thumbnail_sha1: str
        :param thumbnail_cdn_url: The thumbnail_cdn_url of this ProductDTO.  # noqa: E501
        :type thumbnail_cdn_url: str
        :param product_category: The product_category of this ProductDTO.  # noqa: E501
        :type product_category: ProductCategoryDTO
        """
        self.swagger_types = {
            'id': int,
            'sku': str,
            'upc': str,
            'ean': str,
            'name': str,
            'description': str,
            'price': float,
            'product_size': str,
            'colors': str,
            'image': List[bytearray],
            'image_content_type': str,
            'image_sha1': str,
            'image_cdn_url': str,
            'thumbnail_sha1': str,
            'thumbnail_cdn_url': str,
            'product_category': ProductCategoryDTO
        }

        self.attribute_map = {
            'id': 'id',
            'sku': 'sku',
            'upc': 'upc',
            'ean': 'ean',
            'name': 'name',
            'description': 'description',
            'price': 'price',
            'product_size': 'productSize',
            'colors': 'colors',
            'image': 'image',
            'image_content_type': 'imageContentType',
            'image_sha1': 'imageSha1',
            'image_cdn_url': 'imageCdnUrl',
            'thumbnail_sha1': 'thumbnailSha1',
            'thumbnail_cdn_url': 'thumbnailCdnUrl',
            'product_category': 'productCategory'
        }
        self._id = id
        self._sku = sku
        self._upc = upc
        self._ean = ean
        self._name = name
        self._description = description
        self._price = price
        self._product_size = product_size
        self._colors = colors
        self._image = image
        self._image_content_type = image_content_type
        self._image_sha1 = image_sha1
        self._image_cdn_url = image_cdn_url
        self._thumbnail_sha1 = thumbnail_sha1
        self._thumbnail_cdn_url = thumbnail_cdn_url
        self._product_category = product_category

    @classmethod
    def from_dict(cls, dikt) -> 'ProductDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProductDTO of this ProductDTO.  # noqa: E501
        :rtype: ProductDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this ProductDTO.


        :return: The id of this ProductDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this ProductDTO.


        :param id: The id of this ProductDTO.
        :type id: int
        """

        self._id = id

    @property
    def sku(self) -> str:
        """Gets the sku of this ProductDTO.


        :return: The sku of this ProductDTO.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku: str):
        """Sets the sku of this ProductDTO.


        :param sku: The sku of this ProductDTO.
        :type sku: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")  # noqa: E501

        self._sku = sku

    @property
    def upc(self) -> str:
        """Gets the upc of this ProductDTO.


        :return: The upc of this ProductDTO.
        :rtype: str
        """
        return self._upc

    @upc.setter
    def upc(self, upc: str):
        """Sets the upc of this ProductDTO.


        :param upc: The upc of this ProductDTO.
        :type upc: str
        """
        if upc is None:
            raise ValueError("Invalid value for `upc`, must not be `None`")  # noqa: E501

        self._upc = upc

    @property
    def ean(self) -> str:
        """Gets the ean of this ProductDTO.


        :return: The ean of this ProductDTO.
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean: str):
        """Sets the ean of this ProductDTO.


        :param ean: The ean of this ProductDTO.
        :type ean: str
        """
        if ean is None:
            raise ValueError("Invalid value for `ean`, must not be `None`")  # noqa: E501

        self._ean = ean

    @property
    def name(self) -> str:
        """Gets the name of this ProductDTO.


        :return: The name of this ProductDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ProductDTO.


        :param name: The name of this ProductDTO.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this ProductDTO.


        :return: The description of this ProductDTO.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ProductDTO.


        :param description: The description of this ProductDTO.
        :type description: str
        """

        self._description = description

    @property
    def price(self) -> float:
        """Gets the price of this ProductDTO.


        :return: The price of this ProductDTO.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this ProductDTO.


        :param price: The price of this ProductDTO.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def product_size(self) -> str:
        """Gets the product_size of this ProductDTO.


        :return: The product_size of this ProductDTO.
        :rtype: str
        """
        return self._product_size

    @product_size.setter
    def product_size(self, product_size: str):
        """Sets the product_size of this ProductDTO.


        :param product_size: The product_size of this ProductDTO.
        :type product_size: str
        """
        allowed_values = ["S", "M", "L", "XL", "XXL"]  # noqa: E501
        if product_size not in allowed_values:
            raise ValueError(
                "Invalid value for `product_size` ({0}), must be one of {1}"
                .format(product_size, allowed_values)
            )

        self._product_size = product_size

    @property
    def colors(self) -> str:
        """Gets the colors of this ProductDTO.


        :return: The colors of this ProductDTO.
        :rtype: str
        """
        return self._colors

    @colors.setter
    def colors(self, colors: str):
        """Sets the colors of this ProductDTO.


        :param colors: The colors of this ProductDTO.
        :type colors: str
        """

        self._colors = colors

    @property
    def image(self) -> List[bytearray]:
        """Gets the image of this ProductDTO.


        :return: The image of this ProductDTO.
        :rtype: List[bytearray]
        """
        return self._image

    @image.setter
    def image(self, image: List[bytearray]):
        """Sets the image of this ProductDTO.


        :param image: The image of this ProductDTO.
        :type image: List[bytearray]
        """

        self._image = image

    @property
    def image_content_type(self) -> str:
        """Gets the image_content_type of this ProductDTO.


        :return: The image_content_type of this ProductDTO.
        :rtype: str
        """
        return self._image_content_type

    @image_content_type.setter
    def image_content_type(self, image_content_type: str):
        """Sets the image_content_type of this ProductDTO.


        :param image_content_type: The image_content_type of this ProductDTO.
        :type image_content_type: str
        """

        self._image_content_type = image_content_type

    @property
    def image_sha1(self) -> str:
        """Gets the image_sha1 of this ProductDTO.


        :return: The image_sha1 of this ProductDTO.
        :rtype: str
        """
        return self._image_sha1

    @image_sha1.setter
    def image_sha1(self, image_sha1: str):
        """Sets the image_sha1 of this ProductDTO.


        :param image_sha1: The image_sha1 of this ProductDTO.
        :type image_sha1: str
        """

        self._image_sha1 = image_sha1

    @property
    def image_cdn_url(self) -> str:
        """Gets the image_cdn_url of this ProductDTO.


        :return: The image_cdn_url of this ProductDTO.
        :rtype: str
        """
        return self._image_cdn_url

    @image_cdn_url.setter
    def image_cdn_url(self, image_cdn_url: str):
        """Sets the image_cdn_url of this ProductDTO.


        :param image_cdn_url: The image_cdn_url of this ProductDTO.
        :type image_cdn_url: str
        """

        self._image_cdn_url = image_cdn_url

    @property
    def thumbnail_sha1(self) -> str:
        """Gets the thumbnail_sha1 of this ProductDTO.


        :return: The thumbnail_sha1 of this ProductDTO.
        :rtype: str
        """
        return self._thumbnail_sha1

    @thumbnail_sha1.setter
    def thumbnail_sha1(self, thumbnail_sha1: str):
        """Sets the thumbnail_sha1 of this ProductDTO.


        :param thumbnail_sha1: The thumbnail_sha1 of this ProductDTO.
        :type thumbnail_sha1: str
        """

        self._thumbnail_sha1 = thumbnail_sha1

    @property
    def thumbnail_cdn_url(self) -> str:
        """Gets the thumbnail_cdn_url of this ProductDTO.


        :return: The thumbnail_cdn_url of this ProductDTO.
        :rtype: str
        """
        return self._thumbnail_cdn_url

    @thumbnail_cdn_url.setter
    def thumbnail_cdn_url(self, thumbnail_cdn_url: str):
        """Sets the thumbnail_cdn_url of this ProductDTO.


        :param thumbnail_cdn_url: The thumbnail_cdn_url of this ProductDTO.
        :type thumbnail_cdn_url: str
        """

        self._thumbnail_cdn_url = thumbnail_cdn_url

    @property
    def product_category(self) -> ProductCategoryDTO:
        """Gets the product_category of this ProductDTO.


        :return: The product_category of this ProductDTO.
        :rtype: ProductCategoryDTO
        """
        return self._product_category

    @product_category.setter
    def product_category(self, product_category: ProductCategoryDTO):
        """Sets the product_category of this ProductDTO.


        :param product_category: The product_category of this ProductDTO.
        :type product_category: ProductCategoryDTO
        """

        self._product_category = product_category
