/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AdminUserDTO;
import io.swagger.model.CustomerDetailsDTO;
import io.swagger.model.JWTToken;
import io.swagger.model.KeyAndPasswordVM;
import io.swagger.model.LoginVM;
import io.swagger.model.ManagedUserVM;
import io.swagger.model.PasswordChangeDTO;
import io.swagger.model.ProductCategoryDTO;
import io.swagger.model.ProductDTO;
import io.swagger.model.ProductOrderDTO;
import io.swagger.model.ShoppingCartDTO;
import io.swagger.model.User;
import io.swagger.model.UserDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-02-07T20:11:15.784+01:00[Europe/Paris]")
@Api(value = "api", description = "the api API")
public interface ApiApi {

    @ApiOperation(value = "", nickname = "activateAccount", notes = "", tags={ "account-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/api/activate",
        method = RequestMethod.GET)
    ResponseEntity<Void> activateAccount(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "key", required = true) String key
);


    @ApiOperation(value = "", nickname = "authorize", notes = "", response = JWTToken.class, tags={ "user-jwt-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = JWTToken.class) })
    @RequestMapping(value = "/api/authenticate",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<JWTToken> authorize(@ApiParam(value = "" ,required=true )  @Valid @RequestBody LoginVM body
);


    @ApiOperation(value = "", nickname = "changePassword", notes = "", tags={ "account-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/api/account/change-password",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> changePassword(@ApiParam(value = "" ,required=true )  @Valid @RequestBody PasswordChangeDTO body
);


    @ApiOperation(value = "", nickname = "createCustomerDetails", notes = "", response = CustomerDetailsDTO.class, tags={ "customer-details-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CustomerDetailsDTO.class) })
    @RequestMapping(value = "/api/customer-details",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CustomerDetailsDTO> createCustomerDetails(@ApiParam(value = "" ,required=true )  @Valid @RequestBody CustomerDetailsDTO body
);


    @ApiOperation(value = "", nickname = "createProduct", notes = "", response = ProductDTO.class, tags={ "product-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductDTO.class) })
    @RequestMapping(value = "/api/products",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ProductDTO> createProduct(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ProductDTO body
);


    @ApiOperation(value = "", nickname = "createProductCategory", notes = "", response = ProductCategoryDTO.class, tags={ "product-category-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductCategoryDTO.class) })
    @RequestMapping(value = "/api/product-categories",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ProductCategoryDTO> createProductCategory(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ProductCategoryDTO body
);


    @ApiOperation(value = "", nickname = "createProductOrder", notes = "", response = ProductOrderDTO.class, tags={ "product-order-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductOrderDTO.class) })
    @RequestMapping(value = "/api/product-orders",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ProductOrderDTO> createProductOrder(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ProductOrderDTO body
);


    @ApiOperation(value = "", nickname = "createShoppingCart", notes = "", response = ShoppingCartDTO.class, tags={ "shopping-cart-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ShoppingCartDTO.class) })
    @RequestMapping(value = "/api/shopping-carts",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ShoppingCartDTO> createShoppingCart(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ShoppingCartDTO body
);


    @ApiOperation(value = "", nickname = "createUser", notes = "", response = User.class, tags={ "user-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class) })
    @RequestMapping(value = "/api/admin/users",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<User> createUser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody AdminUserDTO body
);


    @ApiOperation(value = "", nickname = "deleteCustomerDetails", notes = "", tags={ "customer-details-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/api/customer-details/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCustomerDetails(@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "deleteProduct", notes = "", tags={ "product-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/api/products/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteProduct(@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "deleteProductCategory", notes = "", tags={ "product-category-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/api/product-categories/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteProductCategory(@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "deleteProductOrder", notes = "", tags={ "product-order-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/api/product-orders/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteProductOrder(@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "deleteShoppingCart", notes = "", tags={ "shopping-cart-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/api/shopping-carts/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteShoppingCart(@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "deleteUser", notes = "", tags={ "user-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/api/admin/users/{login}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@Pattern(regexp="^(?>[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*)|(?>[_.@A-Za-z0-9-]+)$") @ApiParam(value = "",required=true) @PathVariable("login") String login
);


    @ApiOperation(value = "", nickname = "finishPasswordReset", notes = "", tags={ "account-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/api/account/reset-password/finish",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> finishPasswordReset(@ApiParam(value = "" ,required=true )  @Valid @RequestBody KeyAndPasswordVM body
);


    @ApiOperation(value = "", nickname = "getAccount", notes = "", response = AdminUserDTO.class, tags={ "account-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AdminUserDTO.class) })
    @RequestMapping(value = "/api/account",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<AdminUserDTO> getAccount();


    @ApiOperation(value = "", nickname = "getAllCustomerDetails", notes = "", response = CustomerDetailsDTO.class, responseContainer = "List", tags={ "customer-details-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CustomerDetailsDTO.class, responseContainer = "List") })
    @RequestMapping(value = "/api/customer-details",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CustomerDetailsDTO>> getAllCustomerDetails(@Min(0)@ApiParam(value = "Zero-based page index (0..N)", allowableValues = "", defaultValue = "0") @Valid @RequestParam(value = "page", required = false, defaultValue="0") Integer page
,@Min(1)@ApiParam(value = "The size of the page to be returned", allowableValues = "", defaultValue = "20") @Valid @RequestParam(value = "size", required = false, defaultValue="20") Integer size
,@ApiParam(value = "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort
,@ApiParam(value = "", defaultValue = "false") @Valid @RequestParam(value = "eagerload", required = false, defaultValue="false") Boolean eagerload
);


    @ApiOperation(value = "", nickname = "getAllProductCategories", notes = "", response = ProductCategoryDTO.class, responseContainer = "List", tags={ "product-category-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductCategoryDTO.class, responseContainer = "List") })
    @RequestMapping(value = "/api/product-categories",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ProductCategoryDTO>> getAllProductCategories(@Min(0)@ApiParam(value = "Zero-based page index (0..N)", allowableValues = "", defaultValue = "0") @Valid @RequestParam(value = "page", required = false, defaultValue="0") Integer page
,@Min(1)@ApiParam(value = "The size of the page to be returned", allowableValues = "", defaultValue = "20") @Valid @RequestParam(value = "size", required = false, defaultValue="20") Integer size
,@ApiParam(value = "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort
);


    @ApiOperation(value = "", nickname = "getAllProductOrders", notes = "", response = ProductOrderDTO.class, responseContainer = "List", tags={ "product-order-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductOrderDTO.class, responseContainer = "List") })
    @RequestMapping(value = "/api/product-orders",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ProductOrderDTO>> getAllProductOrders(@ApiParam(value = "", defaultValue = "false") @Valid @RequestParam(value = "eagerload", required = false, defaultValue="false") Boolean eagerload
);


    @ApiOperation(value = "", nickname = "getAllProducts", notes = "", response = ProductDTO.class, responseContainer = "List", tags={ "product-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductDTO.class, responseContainer = "List") })
    @RequestMapping(value = "/api/products",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ProductDTO>> getAllProducts(@Min(0)@ApiParam(value = "Zero-based page index (0..N)", allowableValues = "", defaultValue = "0") @Valid @RequestParam(value = "page", required = false, defaultValue="0") Integer page
,@Min(1)@ApiParam(value = "The size of the page to be returned", allowableValues = "", defaultValue = "20") @Valid @RequestParam(value = "size", required = false, defaultValue="20") Integer size
,@ApiParam(value = "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort
,@ApiParam(value = "", defaultValue = "false") @Valid @RequestParam(value = "eagerload", required = false, defaultValue="false") Boolean eagerload
);


    @ApiOperation(value = "", nickname = "getAllPublicUsers", notes = "", response = UserDTO.class, responseContainer = "List", tags={ "public-user-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserDTO.class, responseContainer = "List") })
    @RequestMapping(value = "/api/users",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<UserDTO>> getAllPublicUsers(@Min(0)@ApiParam(value = "Zero-based page index (0..N)", allowableValues = "", defaultValue = "0") @Valid @RequestParam(value = "page", required = false, defaultValue="0") Integer page
,@Min(1)@ApiParam(value = "The size of the page to be returned", allowableValues = "", defaultValue = "20") @Valid @RequestParam(value = "size", required = false, defaultValue="20") Integer size
,@ApiParam(value = "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort
);


    @ApiOperation(value = "", nickname = "getAllShoppingCarts", notes = "", response = ShoppingCartDTO.class, responseContainer = "List", tags={ "shopping-cart-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ShoppingCartDTO.class, responseContainer = "List") })
    @RequestMapping(value = "/api/shopping-carts",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ShoppingCartDTO>> getAllShoppingCarts();


    @ApiOperation(value = "", nickname = "getAllUsers", notes = "", response = AdminUserDTO.class, responseContainer = "List", tags={ "user-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AdminUserDTO.class, responseContainer = "List") })
    @RequestMapping(value = "/api/admin/users",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<AdminUserDTO>> getAllUsers(@Min(0)@ApiParam(value = "Zero-based page index (0..N)", allowableValues = "", defaultValue = "0") @Valid @RequestParam(value = "page", required = false, defaultValue="0") Integer page
,@Min(1)@ApiParam(value = "The size of the page to be returned", allowableValues = "", defaultValue = "20") @Valid @RequestParam(value = "size", required = false, defaultValue="20") Integer size
,@ApiParam(value = "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort
);


    @ApiOperation(value = "", nickname = "getAuthorities", notes = "", response = String.class, responseContainer = "List", tags={ "public-user-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class, responseContainer = "List") })
    @RequestMapping(value = "/api/authorities",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<String>> getAuthorities();


    @ApiOperation(value = "", nickname = "getCustomerDetails", notes = "", response = CustomerDetailsDTO.class, tags={ "customer-details-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CustomerDetailsDTO.class) })
    @RequestMapping(value = "/api/customer-details/{id}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<CustomerDetailsDTO> getCustomerDetails(@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "getProduct", notes = "", response = ProductDTO.class, tags={ "product-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductDTO.class) })
    @RequestMapping(value = "/api/products/{id}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProductDTO> getProduct(@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "getProductCategory", notes = "", response = ProductCategoryDTO.class, tags={ "product-category-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductCategoryDTO.class) })
    @RequestMapping(value = "/api/product-categories/{id}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProductCategoryDTO> getProductCategory(@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "getProductOrder", notes = "", response = ProductOrderDTO.class, tags={ "product-order-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductOrderDTO.class) })
    @RequestMapping(value = "/api/product-orders/{id}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProductOrderDTO> getProductOrder(@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "getShoppingCart", notes = "", response = ShoppingCartDTO.class, tags={ "shopping-cart-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ShoppingCartDTO.class) })
    @RequestMapping(value = "/api/shopping-carts/{id}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<ShoppingCartDTO> getShoppingCart(@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "getUser", notes = "", response = AdminUserDTO.class, tags={ "user-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AdminUserDTO.class) })
    @RequestMapping(value = "/api/admin/users/{login}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<AdminUserDTO> getUser(@Pattern(regexp="^(?>[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*)|(?>[_.@A-Za-z0-9-]+)$") @ApiParam(value = "",required=true) @PathVariable("login") String login
);


    @ApiOperation(value = "", nickname = "isAuthenticated", notes = "", response = String.class, tags={ "account-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/api/authenticate",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> isAuthenticated();


    @ApiOperation(value = "", nickname = "partialUpdateCustomerDetails", notes = "", response = CustomerDetailsDTO.class, tags={ "customer-details-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CustomerDetailsDTO.class) })
    @RequestMapping(value = "/api/customer-details/{id}",
        produces = { "*/*" }, 
        consumes = { "application/json", "application/merge-patch+json" },
        method = RequestMethod.PATCH)
    ResponseEntity<CustomerDetailsDTO> partialUpdateCustomerDetails(@ApiParam(value = "" ,required=true )  @Valid @RequestBody CustomerDetailsDTO body
,@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "partialUpdateProduct", notes = "", response = ProductDTO.class, tags={ "product-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductDTO.class) })
    @RequestMapping(value = "/api/products/{id}",
        produces = { "*/*" }, 
        consumes = { "application/json", "application/merge-patch+json" },
        method = RequestMethod.PATCH)
    ResponseEntity<ProductDTO> partialUpdateProduct(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ProductDTO body
,@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "partialUpdateProductCategory", notes = "", response = ProductCategoryDTO.class, tags={ "product-category-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductCategoryDTO.class) })
    @RequestMapping(value = "/api/product-categories/{id}",
        produces = { "*/*" }, 
        consumes = { "application/json", "application/merge-patch+json" },
        method = RequestMethod.PATCH)
    ResponseEntity<ProductCategoryDTO> partialUpdateProductCategory(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ProductCategoryDTO body
,@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "partialUpdateProductOrder", notes = "", response = ProductOrderDTO.class, tags={ "product-order-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductOrderDTO.class) })
    @RequestMapping(value = "/api/product-orders/{id}",
        produces = { "*/*" }, 
        consumes = { "application/json", "application/merge-patch+json" },
        method = RequestMethod.PATCH)
    ResponseEntity<ProductOrderDTO> partialUpdateProductOrder(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ProductOrderDTO body
,@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "partialUpdateShoppingCart", notes = "", response = ShoppingCartDTO.class, tags={ "shopping-cart-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ShoppingCartDTO.class) })
    @RequestMapping(value = "/api/shopping-carts/{id}",
        produces = { "*/*" }, 
        consumes = { "application/json", "application/merge-patch+json" },
        method = RequestMethod.PATCH)
    ResponseEntity<ShoppingCartDTO> partialUpdateShoppingCart(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ShoppingCartDTO body
,@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "registerAccount", notes = "", tags={ "account-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created") })
    @RequestMapping(value = "/api/register",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> registerAccount(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ManagedUserVM body
);


    @ApiOperation(value = "", nickname = "requestPasswordReset", notes = "", tags={ "account-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/api/account/reset-password/init",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> requestPasswordReset(@ApiParam(value = "" ,required=true )  @Valid @RequestBody String body
);


    @ApiOperation(value = "", nickname = "saveAccount", notes = "", tags={ "account-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/api/account",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> saveAccount(@ApiParam(value = "" ,required=true )  @Valid @RequestBody AdminUserDTO body
);


    @ApiOperation(value = "", nickname = "updateCustomerDetails", notes = "", response = CustomerDetailsDTO.class, tags={ "customer-details-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CustomerDetailsDTO.class) })
    @RequestMapping(value = "/api/customer-details/{id}",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<CustomerDetailsDTO> updateCustomerDetails(@ApiParam(value = "" ,required=true )  @Valid @RequestBody CustomerDetailsDTO body
,@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "updateProduct", notes = "", response = ProductDTO.class, tags={ "product-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductDTO.class) })
    @RequestMapping(value = "/api/products/{id}",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<ProductDTO> updateProduct(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ProductDTO body
,@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "updateProductCategory", notes = "", response = ProductCategoryDTO.class, tags={ "product-category-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductCategoryDTO.class) })
    @RequestMapping(value = "/api/product-categories/{id}",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<ProductCategoryDTO> updateProductCategory(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ProductCategoryDTO body
,@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "updateProductOrder", notes = "", response = ProductOrderDTO.class, tags={ "product-order-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductOrderDTO.class) })
    @RequestMapping(value = "/api/product-orders/{id}",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<ProductOrderDTO> updateProductOrder(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ProductOrderDTO body
,@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "updateShoppingCart", notes = "", response = ShoppingCartDTO.class, tags={ "shopping-cart-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ShoppingCartDTO.class) })
    @RequestMapping(value = "/api/shopping-carts/{id}",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<ShoppingCartDTO> updateShoppingCart(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ShoppingCartDTO body
,@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "updateUser", notes = "", response = AdminUserDTO.class, tags={ "user-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AdminUserDTO.class) })
    @RequestMapping(value = "/api/admin/users",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<AdminUserDTO> updateUser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody AdminUserDTO body
);

}
